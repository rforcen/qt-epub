#pragma once

#include <QZip>
#include <QtXml>

class QEpub : public QZip {
 public:
  class Pair {
   public:
    Pair(QString id, QString content) : id(id), content(content) {}
    QString id, content;
  };

  typedef QMap<QString, QList<Pair>> opf_map;

  QEpub() : QZip() {}
  QEpub(QString file_name) : QZip(file_name), file_name(file_name) {
    if (QZip::isOk()) {
      if (QZip::read_all()) {
        if (eq("mimetype", "application/epub+zip")) {
          auto rootfile =
              xml_get_attribute(contents["META-INF/container.xml"], "rootfile",
                                "full-path")
                  .trimmed();  //  -> OEBPS/content.opf

          opf = xml_get_opf(contents[rootfile]);
          oebps = QFileInfo(rootfile).path();

          for (auto &text : opf["spine"])  // read all text
            all_text.append(qstext_content(text.id));

          ok = true;
        }
      }
    }
  }
  ~QEpub() {}

  operator bool() const { return ok; }

  QList<Pair> &get_metadata() { return opf["metadata"]; }
  QList<Pair> &get_spine() { return opf["spine"]; }
  QList<Pair> &get_manifest() { return opf["manifest"]; }

  int metadata_size() { return opf["metadata"].size(); }

  QStringList get_spine_list() {
    QStringList sl;
    for (auto &s : get_spine()) sl << QFileInfo(s.id).baseName();
    return sl;
  }

 public:
  QString all_text, oebps, file_name;
  opf_map opf;
  bool ok = false;

  bool isOk() { return *this; }

  QString text_location(QString file) {
    return oebps + QDir::separator() + __find(opf["manifest"], file);
  }
  QString qstext_content(QString file) { return contents[text_location(file)]; }

  QString relative_to_file(QUrl name) {
    return name.path().replace("..", oebps);
  }

  QString qstext_from_basename(QString base_name) {
    return qstext_content(base_name + ".xhtml");
  }

  QString get_first_page() { return qstext_content(get_spine().first().id); }

 private:
  // xml helpers
  QString xml_get_attribute(QString txt, QString item, QString attribute) {
    QString res;

    QDomDocument domDocument;
    QString err_msg;
    int err_line, err_col;
    if (domDocument.setContent(txt, false, &err_msg, &err_line, &err_col)) {
      QDomNodeList nl = domDocument.documentElement().elementsByTagName(item);
      res.append(nl.at(0).toElement().attribute(attribute) + " ");
    }
    return res;
  }

  // get content.opf

  QString __get_text(QDomNode &&child) { return child.toElement().text(); }
  QString __get_attr(QDomNode &&child, QString an) {
    return child.toElement().attributeNode(an).value();
  }

  opf_map xml_get_opf(QString txt) {
    opf_map m;
    QStringList itemlist = {"metadata", "manifest", "spine"};

    QString res;
    QDomDocument domDocument;
    QString err_msg;
    int err_line, err_col;

    if (domDocument.setContent(txt, false, &err_msg, &err_line, &err_col)) {
      for (auto &main_item : itemlist) {
        QDomNodeList nl =
            domDocument.documentElement().elementsByTagName(main_item);

        for (int i = 0; i < nl.count(); i++) {
          QDomNodeList childs = nl.at(i).childNodes();

          for (int j = 0; j < childs.count(); j++) {
            if (main_item == "metadata") {
              auto tn = childs.item(j).toElement().tagName();
              QString id, content;
              if (tn.contains("dc:")) {
                id = tn.remove("dc:"), content = __get_text(childs.item(j));
                if (id == "date")
                  id += " " + __get_attr(childs.item(j), "opf:event");

              } else {
                id = __get_attr(childs.item(j), "name"),
                content = __get_attr(childs.item(j), "content");
              }
              m[main_item] << Pair(id, content);

            } else if (main_item == "manifest") {
              auto id = __get_attr(childs.item(j), "id");
              auto href = __get_attr(childs.item(j), "href");
              m[main_item] << Pair(id, href);

            } else if (main_item == "spine") {
              auto id = __get_attr(childs.item(j), "idref");
              m[main_item] << Pair(id, id);
            }
          }
        }
      }
    }
    return m;
  }

  QString __find(QList<Pair> &lp, QString s) {
    for (auto &p : lp)
      if (p.id == s) return p.content;
    return QString();
  }

  // xml file <body> section -> qstring
  QString xml_read(QString file_name) {
    QString res;
    QFile file(file_name);
    if (file.open(QFile::ReadOnly | QFile::Text)) {
      QDomDocument domDocument;
      if (domDocument.setContent(&file)) {
        QStringList il = {"h1", "h2", "p", "div"};
        for (auto &_i : il) {
          QDomNodeList nl = domDocument.documentElement().elementsByTagName(_i);
          for (int i = 0; i < nl.size(); i++)
            res.append(nl.at(i).toElement().text() + " ");
        }
      }
      file.close();
    }
    return res;
  }

  QString xml_read_folder(QString folder) {
    QString content;
    for (auto &d : QDir(folder).entryInfoList({"*.xhtml"}))
      content.append(xml_read(d.filePath()));
    return content;
  }
};
